devtools::check()
devtools::use_gpl3_license()
??use_gpl3_license()
usethis::use_gpl3_license()
devtools::check()
install.packages("devtools", "roxygen2")
install.packages("devtools")
devtools::check()
point <- function(x1 = 0, y1 = 0, z1 = 0){
value <- list(x = x1, y = y1, z = z1)
class(value) = "point"
}
p1 <- function()
{}
a <- point()
a$x
point <- function(x1 = 0, y1 = 0, z1 = 0){
value <- list(x = x1, y = y1, z = z1)
class(value) = "point"
value
}
a <- point()
a$x
$y
a$y
a$z
b <- point(1,2)
b$x
b$y
b$z
b
test <- list(bruh = "lmao")
class(test) = "point"
test
rm(list = ls())
test
point <- function(x1 = 0, y1 = 0, z1 = 0){
value <- list(x = x1, y = y1, z = z1)
class(value) = "point"
value
}
p1 <- point(1,2)
class(p1)
p0 <- point()
p1
p0
class(point)
crossprod(p0,p1)
point <- function(x1 = 0, y1 = 0, z1 = 0){
value <- matrix(x = x1, y = y1, z = z1)
class(value) = "point"
value
}
p0 <- point()
point <- function(x1 = 0, y1 = 0, z1 = 0){
value <- vector(x = x1, y = y1, z = z1)
class(value) = "point"
value
}
p0 <- point()
rm(list = ls())
p0 <- vector(1,1,0)
p0 <- c(1,1,0)
p1 <- c(-1,1,0)
crossprod(p0,p1)
rm(list = ls())
vector3D <- function(x = 0, y = 0, z = 0){
value <- c(x,y,z)
class(value) = "vector3D"
value
}
p <- vector3D
p1 <- vector3D()
p1
p1[0]
p1[1]
p1[2]
p1[3]
p1$x
class(p1)
p1
p1[0]
p1[8]
test <- c(1,43,5,25,2)
test[0]
test[-1]
test
ls()
rm(list = ls())
t <- factor(c("a","b","c"))
class(t)
typeof(t)
vector3D <- function(x1 = 0, y1 = 0, z1 = 0){
value <- list(x = x1, y = y1, z = z1)
class(value) = "vector3D"
value
}
p <- vector3D()
is.object(p)
class(p)
typeof(p)
p1 <- list(x = 0)
class(p)
class(p1)
typeof(p1)
is.object(p)
is.object(p1)
class(class)
typeof(class)
typeof(vector3D)
ftype(p)
ftype(vector3D)
sloop::ftype(vector3D)
print(p)
print(unclass(p))
print.factor()
print.factor(factor(c("1")))
print.factor((c("1")))
rm(list = ls())
new_vector3D <- function(x1 = 0, y1 = 0, z1 = 0){
value <- list(x = x1, y = y1, z = z1)
class(value) = "vector3D"
value
}
p <- new_vector3D(x1 = "hmm")
p
a <- 0
class(c)
class(a)
rm(list = ls())
new_vector3D <- function(x1 = 0, y1 = 0, z1 = 0){
stopifnot(is.numeric(x1) && is.numeric(y1) && is.numeric(z1))
value <- list(x = x1, y = y1, z = z1)
class(value) = "vector3D"
value
}
p <- new_vector3D()
p <- new_vector3D(x = "hmm")
genfun <- function(x){
UseMethod("genfun")
}
genfun.numeric <- function(x){
print("numeric")
}
genfun.default <- function(x){
print("default")
}
genfun(1)
genfun("hello")
?useMethod
??useMethod
genfun <- function(x,y){
UseMethod("genfun",y)
}
genfun("hello", 1)
genfun(y = 1)
genfun <- function(x,y){
UseMethod("genfun",y)
}
genfun <- function(x,y){
UseMethod("genfun","y")
}
genfun(y = 1)
genfun(1,1)
rm(list = ls())
genfun(1,1)
genfun <- function(x,y){
UseMethod("genfun",y)
}
genfun.numeric <- function(x){
print("numeric")
}
genfun.default <- function(x){
print("default")
}
genfun(1,1)
genfun(1,1)
genfun.numeric <- function(x,y){
print("numeric")
}
genfun.default <- function(x,y){
print("default")
}
genfun(1,1)
genfun("hi",1)
genfun("hi","hi")
genfun(1,"hi")
rm(list = ls())
cross_product(a,b){
stopifnot(class(a)=="vector3D" && class(b)=="vector3D")
}
cross_product <- function(a,b){
stopifnot(class(a)=="vector3D" && class(b)=="vector3D")
}
p1 <- new_vector3D(4,5)
new_vector3D <- function(x1 = 0, y1 = 0, z1 = 0){
stopifnot(is.numeric(x1) && is.numeric(y1) && is.numeric(z1))
value <- list(x = x1, y = y1, z = z1)
class(value) = "vector3D"
value
}
p1 <- new_vector3D(4,5)
p2 <- new_vector3D()
p3 <- list(x=0)
cross_product(p1,p2)
cross_product(p1,p3)
?print
print.vector3D <- print(x, ...){
print("vector3D")
}
print.vector3D <- function(x, ...){
print("vector3D")
}
print(p1)
print.vector3D <- function(x, ...){
print("X: " + x$x + ", Y: " + x$y + ", Z: " + x$z)
}
print(p1)
print.vector3D <- function(x, ...){
paste("X: ",x$x,", Y: ",x$y,", Z: ",x$z)
}
print(p1)
new_vector3D <- function(x1 = 0, y1 = 0, z1 = 0){
stopifnot(is.numeric(x1) && is.numeric(y1) && is.numeric(z1))
value <- list(x = x1, y = y1, z = z1)
class(value) = "vector3D"
value
}
cross_product <- function(a,b){
stopifnot(class(a)=="vector3D" && class(b)=="vector3D")
#Z axis of the two vectors are guaranteed to be zero
c_z <- (a$x*b$y - b$x*a$y)
c <- new_vector3D(0,0,c_z)
c
}
#' print() for the vector3D class
print.vector3D <- function(x, ...){
paste("X: ",x$x,", Y: ",x$y,", Z: ",x$z)
}
p1 <- new_vector3D(1,1,0)
p2 <- new_vector3D(-1,1,0)
p3 <- cross_product(p1,p2)
print(p3)
p3 <- new_vector3D()
is_left_of(p1,p2,p3)
#returns true if c is to the left of a->b vector
is_left_of <- function(a,b,c){
stopifnot(class(a)=="vector3D" && class(b)=="vector3D" && class(c)=="vector3D")
#a->b vector
ab <- new_vector3D(b$x-a$x,b$y-a$y,b$z-a$z)
#a->c vector
ac <- new_vector3D(c$x-a$x,c$y-a$y,c$z-a$z)
return(cross_product(ab,ac) > 0)
}
is_left_of(p1,p2,p3)
#returns true if c is to the left of a->b vector
is_left_of <- function(a,b,c){
stopifnot(class(a)=="vector3D" && class(b)=="vector3D" && class(c)=="vector3D")
#a->b vector
ab <- new_vector3D(b$x-a$x,b$y-a$y,b$z-a$z)
#a->c vector
ac <- new_vector3D(c$x-a$x,c$y-a$y,c$z-a$z)
return(cross_product(ab,ac)$z > 0)
}
is_left_of(p1,p2,p3)
#returns true if c is to the left of a->b vector
is_left_of <- function(a,b,c){
stopifnot(class(a)=="vector3D" && class(b)=="vector3D" && class(c)=="vector3D")
#a->b vector
ab <- new_vector3D(b$x-a$x,b$y-a$y,b$z-a$z)
#a->c vector
ac <- new_vector3D(c$x-a$x,c$y-a$y,c$z-a$z)
cross_product(ab,ac)$z > 0
}
is_left_of(p1,p2,p3)
vignette("roxygen2")
roxygen2::roxygenise()
rm(list = ls())
roxygen2::roxygenise()
?new_vector3D
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
#' @title Constructor for the vector3D class
#'
#' @description An object of vector3D class has three values: x,y,z.
#' @param x1 The x value
#' @param y1 The y value
#' @param z1 The z value
new_vector3D <- function(x1 = 0, y1 = 0, z1 = 0){
stopifnot(is.numeric(x1) && is.numeric(y1) && is.numeric(z1))
value <- list(x = x1, y = y1, z = z1)
class(value) = "vector3D"
value
}
#' @title Cross Product of two vectors
#'
#' @description Calculates the Cross Product of two vector3D objects and returns a single vector3D object.
#' @param a First vector
#' @param b Second vector
cross_product <- function(a,b){
stopifnot(class(a)=="vector3D" && class(b)=="vector3D")
#Z axis of the two vectors are guaranteed to be zero
#resultant vector will only be along Z axis
c_z <- (a$x*b$y - b$x*a$y)
c <- new_vector3D(0,0,c_z)
c
}
#' @title Checks if a point lies strictly to the left of a line segment
#'
#' @description returns TRUE if point c lies strictly to the left of a->b vector.
#' @param a initial point of a->b vector
#' @param b final point of a->b vector
#' @param c Point whose relative position is to be calculated
is_left_of <- function(a,b,c){
stopifnot(class(a)=="vector3D" && class(b)=="vector3D" && class(c)=="vector3D")
#a->b vector
ab <- new_vector3D(b$x-a$x,b$y-a$y,b$z-a$z)
#a->c vector
ac <- new_vector3D(c$x-a$x,c$y-a$y,c$z-a$z)
cross_product(ab,ac)$z > 0
}
#' @title print() function for vector3D class
#'
#' @description An S3 method using the print() generic
#'
#' @param x A vector3D object
#' @param ... Additional arguments
#' @examples
#' print(new_vector(5,2,5))
print.vector3D <- function(x, ...){
paste("X: ",x$x,", Y: ",x$y,", Z: ",x$z)
}
devtools::check()
rm(list = ls())
roxygen2::roxygenise
roxygen2::roxygenise()
devtools::check()
